
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/workspace/R/.RData]

> library(swirl)

| Hi! I see that you have some variables saved in your workspace. To
| keep things running smoothly, I recommend you clean up before
| starting swirl.

| Type ls() to see a list of the variables in your workspace. Then,
| type rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use
| the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? Nelson

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 5

  |                                                           |   0%

| Missing values play an important role in statistics and data
| analysis. Often, missing values must not be ignored, but rather
| they should be carefully studied to see if there's an underlying
| pattern or cause for their missingness.

...

  |===                                                        |   5%

| In R, NA is used to represent any value that is 'not available' or
| 'missing' (in the statistical sense). In this lesson, we'll
| explore missing values further.

...

  |======                                                     |  10%

| Any operation involving NA generally yields NA as the result. To
| illustrate, let's create a vector c(44, NA, 5, NA) and assign it
| to a variable x.

> x <- c(44, NA, 5, NA)

| You are quite good my friend!

  |=========                                                  |  15%

| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| You are doing so well!

  |============                                               |  20%

| Notice that the elements of the resulting vector that correspond
| with the NA values in x are also NA.

...

  |===============                                            |  25%

| To make things a little more interesting, lets create a vector
| containing 1000 draws from a standard normal distribution with y
| <- rnorm(1000).

> y <- rnorm(1000)

| All that practice is paying off!

  |==================                                         |  30%

| Next, let's create a vector containing 1000 NAs with z <- rep(NA,
| 1000).

> z <- rep(NA, 1000)

| Your dedication is inspiring!

  |=====================                                      |  35%

| Finally, let's select 100 elements at random from these 2000
| values (combining y and z) such that we don't know how many NAs
| we'll wind up with or what positions they'll occupy in our final
| vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| All that practice is paying off!

  |========================                                   |  40%

| Let's first ask the question of where our NAs are located in our
| data. The is.na() function tells us whether each element of a
| vector is NA. Call is.na() on my_data and assign the result to
| my_na.

> my_na <- is.na()
Error in is.na() : 0 arguments passed to 'is.na' which requires 1
> my_na <- is.na(my_data)

| You are doing so well!

  |===========================                                |  45%

| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE
 [11]  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [21] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE
 [31] FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE
 [41] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
 [51] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE
 [61] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
 [71]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
 [81] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE
 [91] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE

| You got it right!

  |==============================                             |  50%

| Everywhere you see a TRUE, you know the corresponding element of
| my_data is NA. Likewise, everywhere you see a FALSE, you know the
| corresponding element of my_data is one of our random draws from
| the standard normal distribution.

...

  |================================                           |  55%

| In our previous discussion of logical operators, we introduced the
| `==` operator as a method of testing for equality between two
| objects. So, you might think the expression my_data == NA yields
| the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [22] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [43] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [64] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [85] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| That's a job well done!

  |===================================                        |  60%

| The reason you got a vector of all NAs is that NA is not really a
| value, but just a placeholder for a quantity that is not
| available. Therefore the logical expression is incomplete and R
| has no choice but to return a vector of the same length as my_data
| that contains all NAs.

...

  |======================================                     |  65%

| Don't worry if that's a little confusing. The key takeaway is to
| be cautious when using logical expressions anytime NAs might creep
| in, since a single NA value can derail the entire thing.

...

  |=========================================                  |  70%

| So, back to the task at hand. Now that we have a vector, my_na,
| that has a TRUE for every NA and FALSE for every numeric value, we
| can compute the total number of NAs in our data.

...

  |============================================               |  75%

| The trick is to recognize that underneath the surface, R
| represents TRUE as the number 1 and FALSE as the number 0.
| Therefore, if we take the sum of a bunch of TRUEs and FALSEs, we
| get the total number of TRUEs.

...

  |===============================================            |  80%

| Let's give that a try here. Call the sum() function on my_na to
| count the total number of TRUEs in my_na, and thus the total
| number of NAs in my_data. Don't assign the result to a new
| variable.

> sum(my_na)
[1] 53

| That's the answer I was looking for.

  |==================================================         |  85%

| Pretty cool, huh? Finally, let's take a look at the data to
| convince ourselves that everything 'adds up'. Print my_data to the
| console.

> my_data
  [1]          NA          NA          NA          NA          NA
  [6]          NA          NA  0.56415654          NA  0.21649991
 [11]          NA -0.90862767  0.08210122          NA          NA
 [16]  0.97619309  0.45718668          NA  0.80858968 -0.82463711
 [21]  0.63859201  2.32643084 -0.53723968  0.31105715  0.29515659
 [26]          NA  0.45886928 -1.35203437          NA          NA
 [31] -0.24218567  0.57408648 -1.20820089          NA          NA
 [36] -0.12363550          NA          NA  0.52754101          NA
 [41] -0.91947984          NA  0.57647581          NA          NA
 [46] -0.91433335  1.41101933  2.20007102          NA          NA
 [51]  0.07954702          NA -1.94207172  1.04950087          NA
 [56] -1.39579892          NA          NA          NA -0.55927141
 [61]  1.10679741          NA          NA          NA          NA
 [66] -0.63501552          NA          NA          NA          NA
 [71]          NA          NA          NA          NA          NA
 [76] -1.57109899 -0.19253278 -0.51888667          NA          NA
 [81]  1.81816045 -1.36004017 -1.26238000  0.32048041          NA
 [86]          NA          NA -1.11488924 -0.84586005          NA
 [91]  0.56337749 -0.22403550  1.16978099 -2.01202060          NA
 [96]          NA -1.71126050 -0.78908293          NA          NA

| Great job!

  |=====================================================      |  90%

| Now that we've got NAs down pat, let's look at a second type of
| missing value -- NaN, which stands for 'not a number'. To generate
| NaN, try dividing (using a forward slash) 0 by 0 now.

> 0 / 0
[1] NaN

| You got it!

  |========================================================   |  95%

| Let's do one more, just for fun. In R, Inf stands for infinity.
| What happens if you subtract Inf from Inf?

> Inf
[1] Inf

| Not quite! Try again. Or, type info() for more options.

| Type Inf - Inf. Can you guess the result?

> Inf - Inf
[1] NaN

| Excellent work!

  |===========================================================| 100%

| Would you like to receive credit for completing this course on
| Coursera.org?

1: No
2: Yes

Selection: 1

| Keep up the great work!

| You've reached the end of this lesson! Returning to the main
| menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 6

  |                                                           |   0%

| In this lesson, we'll see how to extract elements from a vector
| based on some conditions that we specify.

...

  |==                                                         |   3%

| For example, we may only be interested in the first 20 elements of
| a vector, or only the elements that are not NA, or only those that
| are positive or correspond to a specific variable of interest. By
| the end of this lesson, you'll know how to handle each of these
| scenarios.

...

  |===                                                        |   5%

| I've created for you a vector called x that contains a random
| ordering of 20 numbers (from a standard normal distribution) and
| 20 NAs. Type x now to see what it looks like.

> x
 [1]  0.1466092         NA -0.4571996         NA         NA
 [6]         NA -0.4002717  0.7529859 -1.5610524  0.9521337
[11] -0.9140796         NA  0.5371349  0.4607559         NA
[16]         NA         NA  1.1803181         NA         NA
[21]         NA         NA         NA  1.6170413  0.7358745
[26]  1.0907077         NA  0.0601685 -0.3722603         NA
[31]  0.5598193  1.5687861 -1.6127431         NA         NA
[36] -0.1664533         NA         NA  0.3427891         NA

| You got it right!

  |=====                                                      |   8%

| The way you tell R that you want to select some particular
| elements (i.e. a 'subset') from a vector is by placing an 'index
| vector' in square brackets immediately following the name of the
| vector.

...

  |======                                                     |  10%

| For a simple example, try x[1:10] to view the first ten elements
| of x.

> x[1:10]
 [1]  0.1466092         NA -0.4571996         NA         NA
 [6]         NA -0.4002717  0.7529859 -1.5610524  0.9521337

| You nailed it! Good job!

  |========                                                   |  13%

| Index vectors come in four different flavors -- logical vectors,
| vectors of positive integers, vectors of negative integers, and
| vectors of character strings -- each of which we'll cover in this
| lesson.

...

  |=========                                                  |  15%

| Let's start by indexing with logical vectors. One common scenario
| when working with real-world data is that we want to extract all
| elements of a vector that are not NA (i.e. missing data). Recall
| that is.na(x) yields a vector of logical values the same length as
| x, with TRUEs corresponding to NA values in x and FALSEs
| corresponding to non-NA values in x.

...

  |===========                                                |  18%

| What do you think x[is.na(x)] will give you?

1: A vector of all NAs
2: A vector of length 0
3: A vector with no NAs
4: A vector of TRUEs and FALSEs

Selection: 4

| That's not exactly what I'm looking for. Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So
| if we subset x based on that, what do you expect to happen?

1: A vector of length 0
2: A vector of all NAs
3: A vector with no NAs
4: A vector of TRUEs and FALSEs

Selection: 3

| Not quite right, but keep trying.

| Remember that is.na(x) tells us where the NAs are in a vector. So
| if we subset x based on that, what do you expect to happen?

1: A vector with no NAs
2: A vector of TRUEs and FALSEs
3: A vector of all NAs
4: A vector of length 0

Selection: 1

| Not quite right, but keep trying.

| Remember that is.na(x) tells us where the NAs are in a vector. So
| if we subset x based on that, what do you expect to happen?

1: A vector with no NAs
2: A vector of all NAs
3: A vector of length 0
4: A vector of TRUEs and FALSEs

Selection: 3

| You almost had it, but not quite. Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So
| if we subset x based on that, what do you expect to happen?

1: A vector with no NAs
2: A vector of TRUEs and FALSEs
3: A vector of all NAs
4: A vector of length 0

Selection: 3

| Excellent work!

  |============                                               |  21%

| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| You nailed it! Good job!

  |==============                                             |  23%

| Recall that `!` gives us the negation of a logical expression, so
| !is.na(x) can be read as 'is not NA'. Therefore, if we want to
| create a vector called y that contains all of the non-NA values
| from x, we can use y <- x[!is.na(x)]. Give it a try.

> y <- x[!is.na(x)]

| That's the answer I was looking for.

  |===============                                            |  26%

| Print y to the console.

> y
 [1]  0.1466092 -0.4571996 -0.4002717  0.7529859 -1.5610524
 [6]  0.9521337 -0.9140796  0.5371349  0.4607559  1.1803181
[11]  1.6170413  0.7358745  1.0907077  0.0601685 -0.3722603
[16]  0.5598193  1.5687861 -1.6127431 -0.1664533  0.3427891

| You got it!

  |=================                                          |  28%

| Now that we've isolated the non-missing values of x and put them
| in y, we can subset y as we please.

...

  |==================                                         |  31%

| Recall that the expression y > 0 will give us a vector of logical
| values the same length as y, with TRUEs corresponding to values of
| y that are greater than zero and FALSEs corresponding to values of
| y that are less than or equal to zero. What do you think y[y > 0]
| will give you?

1: A vector of all the positive elements of y
2: A vector of all the negative elements of y
3: A vector of TRUEs and FALSEs
4: A vector of all NAs
5: A vector of length 0

Selection: 1

| You're the best!

  |====================                                       |  33%

| Type y[y > 0] to see that we get all of the positive elements of
| y, which are also the positive elements of our original vector x.

> y[y > 0]
 [1] 0.1466092 0.7529859 0.9521337 0.5371349 0.4607559 1.1803181
 [7] 1.6170413 0.7358745 1.0907077 0.0601685 0.5598193 1.5687861
[13] 0.3427891

| Perseverance, that's the answer.

  |=====================                                      |  36%

| You might wonder why we didn't just start with x[x > 0] to isolate
| the positive elements of x. Try that now to see why.

> x[x > 0]
 [1] 0.1466092        NA        NA        NA        NA 0.7529859
 [7] 0.9521337        NA 0.5371349 0.4607559        NA        NA
[13]        NA 1.1803181        NA        NA        NA        NA
[19]        NA 1.6170413 0.7358745 1.0907077        NA 0.0601685
[25]        NA 0.5598193 1.5687861        NA        NA        NA
[31]        NA 0.3427891        NA

| Keep working like that and you'll get there!

  |=======================                                    |  38%

| Since NA is not a value, but rather a placeholder for an unknown
| quantity, the expression NA > 0 evaluates to NA. Hence we get a
| bunch of NAs mixed in with our positive numbers when we do this.

...

  |========================                                   |  41%

| Combining our knowledge of logical operators with our new
| knowledge of subsetting, we could do this -- x[!is.na(x) & x > 0].
| Try it out.

> x[!is.na(x) & x > 0]
 [1] 0.1466092 0.7529859 0.9521337 0.5371349 0.4607559 1.1803181
 [7] 1.6170413 0.7358745 1.0907077 0.0601685 0.5598193 1.5687861
[13] 0.3427891

| You got it right!

  |==========================                                 |  44%

| In this case, we request only values of x that are both
| non-missing AND greater than zero.

...

  |===========================                                |  46%

| I've already shown you how to subset just the first ten values of
| x using x[1:10]. In this case, we're providing a vector of
| positive integers inside of the square brackets, which tells R to
| return only the elements of x numbered 1 through 10.

...

  |=============================                              |  49%

| Many programming languages use what's called 'zero-based
| indexing', which means that the first element of a vector is
| considered element 0. R uses 'one-based indexing', which (you
| guessed it!) means the first element of a vector is considered
| element 1.

...

  |==============================                             |  51%

| Can you figure out how we'd subset the 3rd, 5th, and 7th elements
| of x? Hint -- Use the c() function to specify the element numbers
| as a numeric vector.

> x <- c[3, 5, 7]
Error in c[3, 5, 7] : object of type 'builtin' is not subsettable
> x <- c(3, 5, 7)

| One more time. You can do it! Or, type info() for more options.

| Create a vector of indexes with c(3, 5, 7), then put that inside
| of the square brackets.

> x <- [c(3, 5, 7)]
Error: unexpected '[' in "x <- ["
> x[c(3, 5, 7)]
[1]  7 NA NA

| Keep working like that and you'll get there!

  |================================                           |  54%

| It's important that when using integer vectors to subset our
| vector x, we stick with the set of indexes {1, 2, ..., 40} since x
| only has 40 elements. What happens if we ask for the zeroth
| element of x (i.e. x[0])? Give it a try.

> x[0]
numeric(0)

| Your dedication is inspiring!

  |=================================                          |  56%

| As you might expect, we get nothing useful. Unfortunately, R
| doesn't prevent us from doing this. What if we ask for the 3000th
| element of x? Try it out.

> x[3000]
[1] NA

| That's a job well done!

  |===================================                        |  59%

| Again, nothing useful, but R doesn't prevent us from asking for
| it. This should be a cautionary tale. You should always make sure
| that what you are asking for is within the bounds of the vector
| you're working with.

...

  |====================================                       |  62%

| What if we're interested in all elements of x EXCEPT the 2nd and
| 10th? It would be pretty tedious to construct a vector containing
| all numbers 1 through 40 EXCEPT 2 and 10.

...

  |======================================                     |  64%

| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)]
| gives us ONLY the 2nd and 10th elements of x, x[c(-2, -10)] gives
| us all elements of x EXCEPT for the 2nd and 10 elements.  Try
| x[c(-2, -10)] now to see this.

> x[c(-2, -10)]
[1] 3 7

| Excellent job!

  |=======================================                    |  67%

| A shorthand way of specifying multiple negative numbers is to put
| the negative sign out in front of the vector of positive numbers.
| Type x[-c(2, 10)] to get the exact same result.

> x[-c(2, 10)]
[1] 3 7

| Your dedication is inspiring!

  |=========================================                  |  69%

| So far, we've covered three types of index vectors -- logical,
| positive integer, and negative integer. The only remaining type
| requires us to introduce the concept of 'named' elements.

...

  |==========================================                 |  72%

| Create a numeric vector with three named elements using vect <-
| c(foo = 11, bar = 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf =NA)

| All that practice is paying off!

  |============================================               |  74%

| When we print vect to the console, you'll see that each element
| has a name. Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| You are doing so well!

  |=============================================              |  77%

| We can also get the names of vect by passing vect as an argument
| to the names() function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| That's the answer I was looking for.

  |===============================================            |  79%

| Alternatively, we can create an unnamed vector vect2 with c(11, 2,
| NA). Do that now.

> vect2 <- c(11, 2, NA)

| Excellent job!

  |================================================           |  82%

| Then, we can add the `names` attribute to vect2 after the fact
| with names(vect2) <- c("foo", "bar", "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| You got it right!

  |==================================================         |  85%

| Now, let's check that vect and vect2 are the same by passing them
| as arguments to the identical() function.

> identical
function (x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE, 
    ignore.bytecode = TRUE, ignore.environment = FALSE, ignore.srcref = TRUE) 
.Internal(identical(x, y, num.eq, single.NA, attrib.as.set, ignore.bytecode, 
    ignore.environment, ignore.srcref))
<bytecode: 0x00000000097ced98>
<environment: namespace:base>

| Keep trying! Or, type info() for more options.

| The identical() function tells us if its first two arguments are,
| well, identical.

> identical(vect, vect2)
[1] TRUE

| You are amazing!

  |===================================================        |  87%

| Indeed, vect and vect2 are identical named vectors.

...

  |=====================================================      |  90%

| Now, back to the matter of subsetting a vector by named elements.
| Which of the following commands do you think would give us the
| second element of vect?

1: vect["2"]
2: vect["bar"]
3: vect[bar]

Selection: 2

| You nailed it! Good job!

  |======================================================     |  92%

| Now, try it out.

> vect["bar"]
bar 
  2 

| You are really on a roll!

  |========================================================   |  95%

| Likewise, we can specify a vector of names with vect[c("foo",
| "bar")]. Try it out.

> vect[c("foo", "bar")]
foo bar 
 11   2 

| You are really on a roll!

  |=========================================================  |  97%

| Now you know all four methods of subsetting data from vectors.
| Different approaches are best in different scenarios and when in
| doubt, try it out!

...

  |===========================================================| 100%

| Would you like to receive credit for completing this course on
| Coursera.org?

1: Yes
2: No
