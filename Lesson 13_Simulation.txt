
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/workspace/R/.RData]

> library(swirl)

| Hi! I see that you have some variables saved in your workspace. To keep things running smoothly, I
| recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type rm(list=ls()) to clear your
| workspace.

| Type swirl() when you are ready to begin.

> ls()
 [1] "%p%"             "boring_function" "cls_list"        "cls_vect"        "evaluate"       
 [6] "flag_colors"     "flag_shapes"     "flags"           "mad_libs"        "my_char"        
[11] "my_mean"         "my_name"         "my_seq"          "num_vect"        "ok"             
[16] "old.dir"         "plants"          "remainder"       "shape_mat"       "telegram"       
[21] "tf"              "unique_vals"     "viewinfo"        "x"              
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you
| are new, call yourself something unique.

What shall I call you? Nelson

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 13

  |                                                                                                 |   0%

| One of the great advantages of using a statistical programming language like R is its vast collection of
| tools for simulating random numbers.

...

  |===                                                                                              |   3%

| This lesson assumes familiarity with a few common probability distributions, but these topics will only
| be discussed with respect to random number generation. Even if you have no prior experience with these
| concepts, you should be able to complete the lesson and understand the main ideas.

...

  |======                                                                                           |   6%

| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the
| documentation.

> ?sample

| Excellent job!

  |=========                                                                                        |   9%

| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 4 6 1 4

| You are really on a roll!

  |============                                                                                     |  12%

| Now repeat the command to see how your result differs. (The probability of rolling the exact same result
| is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE)
[1] 5 2 4 1

| That's correct!

  |===============                                                                                  |  15%

| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH
| replacement. Sampling with replacement simply means that each number is "replaced" after it is selected,
| so that the same number can show up more than once. This is what we want here, since what you roll on
| one die shouldn't affect what you roll on any of the others.

...

  |==================                                                                               |  18%

| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave
| off the 'replace' argument.

> sample(1:20, 10, replace = FALSE)
 [1]  5  3 15  2 20  9  1 10 18 17

| Keep trying! Or, type info() for more options.

| Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.

> sample(1:20, 10)
 [1]  8 11 16  7 18 15 12 19  3  1

| Perseverance, that's the answer.

  |=====================                                                                            |  21%

| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |========================                                                                         |  24%

| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet.
| Take a look at it now.

> sample(LETTERS)
 [1] "H" "S" "K" "X" "O" "Q" "Y" "A" "F" "M" "P" "L" "R" "N" "B" "T" "V" "W" "I" "D" "U" "Z" "J" "E" "G"
[26] "C"

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Type LETTERS to print its contents to the console.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y"
[26] "Z"

| Excellent job!

  |==========================                                                                       |  27%

| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example,
| try sample(LETTERS) to permute all 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "O" "H" "L" "X" "Q" "K" "N" "Z" "B" "P" "M" "T" "E" "A" "F" "G" "V" "S" "D" "U" "C" "Y" "W" "I" "J"
[26] "R"

| You nailed it! Good job!

  |=============================                                                                    |  30%

| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size'
| argument to sample() is not specified, R takes a sample equal in size to the vector from which you are
| sampling.

...

  |================================                                                                 |  33%

| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3
| probability of landing 'tails' and a 0.7 probability of landing 'heads'.

...

  |===================================                                                              |  36%

| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size
| 100 from the vector c(0,1), with replacement. Since the coin is unfair, we must attach specific
| probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign
| the result to a new variable called flips.

> flips <- sample(c(0, 1), prob = c(0.3, 0.7), 100, replace = TRUE)

| You got it right!

  |======================================                                                           |  39%

| View the contents of the flips variable.

> flips
  [1] 0 0 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 0 0 0 1
 [52] 1 1 0 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 1 1 0 0 1 0 1 1 1 0 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1

| Great job!

  |=========================================                                                        |  42%

| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70
| of our coin flips to have the value 1. Count the actual number of 1s contained in flips using the sum()
| function.

> sum(flips)
[1] 69

| That's correct!

  |============================================                                                     |  45%

| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so
| we can use rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using
| ?rbinom.

> ?rbinom

| You are amazing!

  |===============================================                                                  |  48%

| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"),
| a p*** (for "probability"), and q*** (for "quantile"). We are most interested in the r*** functions in
| this lesson, but I encourage you to explore the others on your own.

...

  |==================================================                                               |  52%

| A binomial random variable represents the number of 'successes' (heads) in a given number of independent
| 'trials' (coin flips). Therefore, we can generate a single random variable that represents the number of
| heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only
| specify the probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1, size = 100, prob = 0.7)
[1] 65

| You are really on a roll!

  |=====================================================                                            |  55%

| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1,
| with success probability of 0.7. Give it a try, assigning the result to a new variable called flips2.

> flips2 <- rbinom(1, size = 100, prob = 0.7)

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(n = 100, size = 1, prob = 0.7)

| You nailed it! Good job!

  |========================================================                                         |  58%

| View the contents of flips2.

> flips2
  [1] 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1
 [52] 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1

| Excellent job!

  |===========================================================                                      |  61%

| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 69

| You nailed it! Good job!

  |==============================================================                                   |  64%

| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions.
| Pull up the documentation for rnorm() now.

> rnorm(flips2)
  [1]  1.22996296 -1.72510559  1.50085658 -1.09366970 -2.04110939 -0.12941008  0.66537992 -0.95936222
  [9]  1.01170191 -0.01082825 -0.20423383  0.04856857 -0.39875162 -1.32553597 -1.28678613  2.30986697
 [17] -1.20204912  1.16169601  0.38372452 -0.02854567  0.33854113 -0.33352111 -0.76299674  0.02230760
 [25] -0.86855662 -0.97063315 -0.83246984  0.34582408 -0.51289316  2.16874669  0.42827804  0.16166205
 [33]  1.03023954 -0.33615475 -0.10449689  0.14928489  1.73931179  1.21289847  0.23138740 -1.45132824
 [41] -0.61164569 -0.22031657  0.37234657  0.71956482 -1.27209928  0.31474066  0.69218158  0.14718568
 [49]  1.12791123 -0.24688185  2.08453529  0.80292839  0.60393146 -0.42655861 -1.15187412  0.57707953
 [57]  1.02930063  2.01972828 -0.10347180 -0.41146823  0.06636948  0.09220411 -1.00529538  0.94398459
 [65] -1.43139252  0.31586494 -0.33795287 -0.06185977 -0.45335784  2.67351587 -0.20381907 -0.71093818
 [73] -0.46548441 -0.92619586 -2.38089186  0.19208988 -0.47355936 -1.42018954  0.06414695 -0.57754436
 [81]  0.60457895  1.12735531  0.85885273 -0.72755673  0.08746147 -0.20488649  0.23353670  1.47759117
 [89] -0.81606509  0.27967170 -1.17832975 -1.72551999  0.76204908 -1.00893392  1.65209236 -0.82127313
 [97]  1.27596248  1.04626164 -0.42824995  0.35999239

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| Type ?rnorm to view its help file.

> ?rnorm

| You're the best!

  |=================================================================                                |  67%

| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage'
| section in the documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and
| 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution.
| Give it a try.

> rnorm(10, mean = 0, sd = 1)
 [1]  0.9851312  1.1707695 -1.5368155 -1.7682137  0.5585513 -0.8713812  1.7506410 -1.4470670 -1.1559962
[10] -1.3699431

| Your dedication is inspiring!

  |====================================================================                             |  70%

| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean = 100, sd = 25)
 [1] 110.81063 140.90647  87.67193  91.07005 112.47806  79.81775  92.13275  93.03270  72.75575  85.93354

| You are amazing!

  |=======================================================================                          |  73%

| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated
| from a Poisson distribution with mean 10? Let's start with one group of 5 numbers, then I'll show you
| how to repeat the operation 100 times in a convenient and compact way.

...

  |=========================================================================                        |  76%

| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for
| rpois() if you need help.

> ?rpois
> rpois(5, lambda = 10)
[1] 11  8  8  9  9

| Your dedication is inspiring!

  |============================================================================                     |  79%

| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new
| variable called my_pois.

> my_pois <- replicate(100, rpois(5, 10))

| Excellent job!

  |===============================================================================                  |  82%

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18]
[1,]   15   10   13   10   16   10    5    8   15     7    16    14     7    11     8     9    12     8
[2,]    9    6   14    7   12   11   10   12   10     9    10     9     6     6    12     9     8    10
[3,]   10    9    6   10    9   12    9    9    6    10     9     8     9     8     7    12     1    11
[4,]    9    9   13   11   10   14    9   11    9     9    12    12    12    12    16     8     4    11
[5,]   11   10   11    9    8    8    9    8   12    10    10     9     6     4     9     7    10     9
     [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35]
[1,]    12    10     3    13     9    17     7    13    10    10     8    17    12     6    10    10     5
[2,]    11    14    11    11     9    10    11    13    13     8     5     9    11     8    12    11    10
[3,]    14    14     3    13     4    14    10     9    11     9    10    16     7     9    13     7     9
[4,]    12    12    10     5     9    17     9    13    17     4    21    14    18     7     7     5    12
[5,]     6    10     6     9    17    16     7    13    16     9     9    11    11    12     6     3    10
     [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52]
[1,]     7    10    11     9    10     9     9     9    13    13    10     5     5     8    13    10     5
[2,]    13    14     8    11     7     8     7     4     8    15    12    11    14    12     5    15    12
[3,]    10    14    15    10     9     9     6    10     8     6     4     8     8     9     9     9    10
[4,]     9    10     6     7    12     9    15     9     1    18    13    12     9     8     9     7     8
[5,]    12     8    18    15    11    11     6    10     5     9    12     7    10     9     9     8    12
     [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69]
[1,]    10    14     9    13    14    11    12     9     9     6    16     6     9     9    11     9     4
[2,]    14    10    16     6     4     6     2    10     2     8    10     6    10    16    16    12    14
[3,]    12    11    13    14     8     8    18     8     9    13    11     6    12    17    13    18    14
[4,]     9    11    11    14     6    19    12    11    11     6     7     7     9    12     9     9    13
[5,]    10    16    10    13    11    13     5    11    13     7     5    14    11     9     2    12    11
     [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]
[1,]     9    12     8    10    11     7    12     9    15    12    10    14     8     8     9     6     8
[2,]    13     9     9     4     6     9     9     9     8    16     9     9     5    18    10    12    10
[3,]    10    12     8    14    13     9     5    10    10     8    13    12    10     8     9     4    16
[4,]     8    14     9    14     9     9    11    13    10    10     9     8    10    12     9    12    12
[5,]     8     7    12    11     9     7     6    10    12     4     9     9     6     8     7     6    21
     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]    16    14     5    11    10     6    13    11    10    17    10    20     8      8
[2,]    10    15    10     6     6     6    13    12    13     9     7    12     6     13
[3,]    23    11    12    15     9     9    11    12     7     8    12     8    13      6
[4,]    11    10    12     8    12    10     9     5    16    11     6     5    14      7
[5,]    11     9    13     7    16    10    12    10    11     9     9    11    10      4

| You are really on a roll!

  |==================================================================================               |  85%

| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson
| distribution with mean 10. Now we can find the mean of each column in my_pois using the colMeans()
| function. Store the result in a variable called cm.

> cm <- colMeans(my_pois)

| Keep up the great work!

  |=====================================================================================            |  88%

| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> hist(cm)

| Excellent job!

  |========================================================================================         |  91%

| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at
| work, but that's a lesson for another day!

...

  |===========================================================================================      |  94%

| All of the standard probability distributions are built into R, including exponential (rexp()),
| chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

...

  |==============================================================================================   |  97%

| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I
| encourage you to explore these and other functions further on your own.

...

  |=================================================================================================| 100%

| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes