
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/workspace/R/.RData]

> library(swirl)

| Hi! I see that you have some variables saved in your workspace. To
| keep things running smoothly, I recommend you clean up before
| starting swirl.

| Type ls() to see a list of the variables in your workspace. Then,
| type rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use
| the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? Nelson

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 5

  |                                                           |   0%

| Missing values play an important role in statistics and data
| analysis. Often, missing values must not be ignored, but rather
| they should be carefully studied to see if there's an underlying
| pattern or cause for their missingness.

...

  |===                                                        |   5%

| In R, NA is used to represent any value that is 'not available' or
| 'missing' (in the statistical sense). In this lesson, we'll
| explore missing values further.

...

  |======                                                     |  10%

| Any operation involving NA generally yields NA as the result. To
| illustrate, let's create a vector c(44, NA, 5, NA) and assign it
| to a variable x.

> x <- c(44, NA, 5, NA)

| You are quite good my friend!

  |=========                                                  |  15%

| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| You are doing so well!

  |============                                               |  20%

| Notice that the elements of the resulting vector that correspond
| with the NA values in x are also NA.

...

  |===============                                            |  25%

| To make things a little more interesting, lets create a vector
| containing 1000 draws from a standard normal distribution with y
| <- rnorm(1000).

> y <- rnorm(1000)

| All that practice is paying off!

  |==================                                         |  30%

| Next, let's create a vector containing 1000 NAs with z <- rep(NA,
| 1000).

> z <- rep(NA, 1000)

| Your dedication is inspiring!

  |=====================                                      |  35%

| Finally, let's select 100 elements at random from these 2000
| values (combining y and z) such that we don't know how many NAs
| we'll wind up with or what positions they'll occupy in our final
| vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| All that practice is paying off!

  |========================                                   |  40%

| Let's first ask the question of where our NAs are located in our
| data. The is.na() function tells us whether each element of a
| vector is NA. Call is.na() on my_data and assign the result to
| my_na.

> my_na <- is.na()
Error in is.na() : 0 arguments passed to 'is.na' which requires 1
> my_na <- is.na(my_data)

| You are doing so well!

  |===========================                                |  45%

| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE
 [11]  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [21] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE
 [31] FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE
 [41] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
 [51] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE
 [61] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
 [71]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
 [81] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE
 [91] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE

| You got it right!

  |==============================                             |  50%

| Everywhere you see a TRUE, you know the corresponding element of
| my_data is NA. Likewise, everywhere you see a FALSE, you know the
| corresponding element of my_data is one of our random draws from
| the standard normal distribution.

...

  |================================                           |  55%

| In our previous discussion of logical operators, we introduced the
| `==` operator as a method of testing for equality between two
| objects. So, you might think the expression my_data == NA yields
| the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [22] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [43] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [64] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [85] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| That's a job well done!

  |===================================                        |  60%

| The reason you got a vector of all NAs is that NA is not really a
| value, but just a placeholder for a quantity that is not
| available. Therefore the logical expression is incomplete and R
| has no choice but to return a vector of the same length as my_data
| that contains all NAs.

...

  |======================================                     |  65%

| Don't worry if that's a little confusing. The key takeaway is to
| be cautious when using logical expressions anytime NAs might creep
| in, since a single NA value can derail the entire thing.

...

  |=========================================                  |  70%

| So, back to the task at hand. Now that we have a vector, my_na,
| that has a TRUE for every NA and FALSE for every numeric value, we
| can compute the total number of NAs in our data.

...

  |============================================               |  75%

| The trick is to recognize that underneath the surface, R
| represents TRUE as the number 1 and FALSE as the number 0.
| Therefore, if we take the sum of a bunch of TRUEs and FALSEs, we
| get the total number of TRUEs.

...

  |===============================================            |  80%

| Let's give that a try here. Call the sum() function on my_na to
| count the total number of TRUEs in my_na, and thus the total
| number of NAs in my_data. Don't assign the result to a new
| variable.

> sum(my_na)
[1] 53

| That's the answer I was looking for.

  |==================================================         |  85%

| Pretty cool, huh? Finally, let's take a look at the data to
| convince ourselves that everything 'adds up'. Print my_data to the
| console.

> my_data
  [1]          NA          NA          NA          NA          NA
  [6]          NA          NA  0.56415654          NA  0.21649991
 [11]          NA -0.90862767  0.08210122          NA          NA
 [16]  0.97619309  0.45718668          NA  0.80858968 -0.82463711
 [21]  0.63859201  2.32643084 -0.53723968  0.31105715  0.29515659
 [26]          NA  0.45886928 -1.35203437          NA          NA
 [31] -0.24218567  0.57408648 -1.20820089          NA          NA
 [36] -0.12363550          NA          NA  0.52754101          NA
 [41] -0.91947984          NA  0.57647581          NA          NA
 [46] -0.91433335  1.41101933  2.20007102          NA          NA
 [51]  0.07954702          NA -1.94207172  1.04950087          NA
 [56] -1.39579892          NA          NA          NA -0.55927141
 [61]  1.10679741          NA          NA          NA          NA
 [66] -0.63501552          NA          NA          NA          NA
 [71]          NA          NA          NA          NA          NA
 [76] -1.57109899 -0.19253278 -0.51888667          NA          NA
 [81]  1.81816045 -1.36004017 -1.26238000  0.32048041          NA
 [86]          NA          NA -1.11488924 -0.84586005          NA
 [91]  0.56337749 -0.22403550  1.16978099 -2.01202060          NA
 [96]          NA -1.71126050 -0.78908293          NA          NA

| Great job!

  |=====================================================      |  90%

| Now that we've got NAs down pat, let's look at a second type of
| missing value -- NaN, which stands for 'not a number'. To generate
| NaN, try dividing (using a forward slash) 0 by 0 now.

> 0 / 0
[1] NaN

| You got it!

  |========================================================   |  95%

| Let's do one more, just for fun. In R, Inf stands for infinity.
| What happens if you subtract Inf from Inf?

> Inf
[1] Inf

| Not quite! Try again. Or, type info() for more options.

| Type Inf - Inf. Can you guess the result?

> Inf - Inf
[1] NaN

| Excellent work!

  |===========================================================| 100%

| Would you like to receive credit for completing this course on
| Coursera.org?

1: No
2: Yes
