
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/workspace/R/.RData]

> swirl()
Error in swirl() : could not find function "swirl"
> library()
> library(swirl)

| Hi! I see that you have some variables saved in your workspace. To
| keep things running smoothly, I recommend you clean up before
| starting swirl.

| Type ls() to see a list of the variables in your workspace. Then,
| type rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use
| the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? Nelson

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 3

  |                                                           |   0%

| In this lesson, you'll learn how to create sequences of numbers in
| R.

...

  |===                                                        |   4%

| The simplest way to create a sequence of numbers in R is by using
| the `:` operator. Type 1:20 to see how it works.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You got it right!

  |=====                                                      |   9%

| That gave us every integer between (and including) 1 and 20. We
| could also use it to create a sequence of real numbers. For
| example, try pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| Keep up the great work!

  |========                                                   |  13%

| The result is a vector of real numbers starting with pi (3.142...)
| and increasing in increments of 1. The upper limit of 10 is never
| reached, since the next number in our sequence would be greater
| than 10.

...

  |==========                                                 |  17%

| What happens if we do 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| That's the answer I was looking for.

  |=============                                              |  22%

| It counted backwards in increments of 1! It's unlikely we'd want
| this behavior, but nonetheless it's good to know how it could
| happen.

...

  |===============                                            |  26%

| Remember that if you have questions about a particular R function,
| you can access its documentation with a question mark followed by
| the function name: ?function_name_here. However, in the case of an
| operator like the colon used above, you must enclose the symbol in
| backticks like this: ?`:`. (NOTE: The backtick (`) key is
| generally located in the top left corner of a keyboard, above the
| Tab key. If you don't have a backtick key, you can use regular
| quotes.)

...?`:`

  |==================                                         |  30%

| Pull up the documentation for `:` now.

> 
> `:`
.Primitive(":")

| Not quite, but you're learning! Try again. Or, type info() for
| more options.

| In order to view the documentation for a symbol like the colon
| operator, you have to use backticks (or quotes). This is so R
| knows you are not attempting to use the symbol in the command.
| Here's what it looks like: ?`:`. Don't forget the question mark
| out front.

> ?`:`

| Your dedication is inspiring!

  |=====================                                      |  35%

| Often, we'll desire more control over a sequence we're creating
| than what the `:` operator gives us. The seq() function serves
| this purpose.

...

  |=======================                                    |  39%

| The most basic use of seq() does exactly the same thing as the `:`
| operator. Try seq(1, 20) to see this.

> seq(1, 20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You nailed it! Good job!

  |==========================                                 |  43%

| This gives us the same output as 1:20. However, let's say that
| instead we want a vector of numbers ranging from 0 to 10,
| incremented by 0.5. seq(0, 10, by=0.5) does just that. Try it out.

> seq(0, 10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0
[14]  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0

| You are quite good my friend!

  |============================                               |  48%

| Or maybe we don't care what the increment is and we just want a
| sequence of 30 numbers between 5 and 10. seq(5, 10, length=30)
| does the trick. Give it a shot now and store the result in a new
| variable called my_seq.

> my_seq <- seq(5, 10, length=30)

| Perseverance, that's the answer.

  |===============================                            |  52%

| To confirm that my_seq has length 30, we can use the length()
| function. Try it now.

> length(my_seq)
[1] 30

| Excellent job!

  |=================================                          |  57%

| Let's pretend we don't know the length of my_seq, but we want to
| generate a sequence of integers from 1 to N, where N represents
| the length of the my_seq vector. In other words, we want a new
| vector (1, 2, 3, ...) that is the same length as my_seq.

...

  |====================================                       |  61%

| There are several ways we could do this. One possibility is to
| combine the `:` operator and the length() function like this:
| 1:length(my_seq). Give that a try.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21
[22] 22 23 24 25 26 27 28 29 30

| You are really on a roll!

  |======================================                     |  65%

| Another option is to use seq(along.with = my_seq). Give that a
| try.

> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21
[22] 22 23 24 25 26 27 28 29 30

| Excellent work!

  |=========================================                  |  70%

| However, as is the case with many common tasks, R has a separate
| built-in function for this purpose called seq_along(). Type
| seq_along(my_seq) to see it in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21
[22] 22 23 24 25 26 27 28 29 30

| Nice work!

  |============================================               |  74%

| There are often several approaches to solving the same problem,
| particularly in R. Simple approaches that involve less typing are
| generally best. It's also important for your code to be readable,
| so that you and others can figure out what's going on without too
| much hassle.

...

  |==============================================             |  78%

| If R has a built-in function for a particular task, it's likely
| that function is highly optimized for that purpose and is your
| best option. As you become a more advanced R programmer, you'll
| design your own functions to perform tasks when there are no
| better options. We'll explore writing your own functions in future
| lessons.

...

  |=================================================          |  83%

| One more function related to creating sequences of numbers is
| rep(), which stands for 'replicate'. Let's look at a few uses.

...

  |===================================================        |  87%

| If we're interested in creating a vector that contains 40 zeros,
| we can use rep(0, times = 40). Try it out.

> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[33] 0 0 0 0 0 0 0 0

| Nice work!

  |======================================================     |  91%

| If instead we want our vector to contain 10 repetitions of the
| vector (0, 1, 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.

> rep(c(0, 1, 2), times =10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| You nailed it! Good job!

  |========================================================   |  96%

| Finally, let's say that rather than repeating the vector (0, 1, 2)
| over and over again, we want our vector to contain 10 zeros, then
| 10 ones, then 10 twos. We can do this with the `each` argument.
| Try rep(c(0, 1, 2), each = 10).

> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| Great job!

  |===========================================================| 100%

| Would you like to receive credit for completing this course on
| Coursera.org?

1: Yes
2: No

Selection: 2

| Great job!

| You've reached the end of this lesson! Returning to the main
| menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 4

  |                                                           |   0%

| The simplest and most common data structure in R is the vector.

...

  |==                                                         |   3%

| Vectors come in two different flavors: atomic vectors and lists.
| An atomic vector contains exactly one data type, whereas a list
| may contain multiple data types. We'll explore atomic vectors
| further before we get to lists.

...

  |===                                                        |   5%

| In previous lessons, we dealt entirely with numeric vectors, which
| are one type of atomic vector. Other types of atomic vectors
| include logical, character, integer, and complex. In this lesson,
| we'll take a closer look at logical and character vectors.

...

  |=====                                                      |   8%

| Logical vectors can contain the values TRUE, FALSE, and NA (for
| 'not available'). These values are generated as the result of
| logical 'conditions'. Let's experiment with some simple
| conditions.

...

  |======                                                     |  11%

| First, create a numeric vector num_vect that contains the values
| 0.5, 55, -10, and 6.

> num_vect(0.5, 55, -10, 6)
Error in num_vect(0.5, 55, -10, 6) : could not find function "num_vect"
> num_vect <- (0.5, 55, -10, 6)
Error: unexpected ',' in "num_vect <- (0.5,"
> num_vect <- 0.5, 55, -10, 6
Error: unexpected ',' in "num_vect <- 0.5,"
> num_vect <- c(0.5, 55, -10, 6)

| You are really on a roll!

  |========                                                   |  13%

| Now, create a variable called tf that gets the result of num_vect
| < 1, which is read as 'num_vect is less than 1'.

> tf <- num_vect < 1

| You got it right!

  |=========                                                  |  16%

| What do you think tf will look like?

1: a vector of 4 logical values
2: a single logical value

Selection: 2

| You're close...I can feel it! Try it again.

| Remember our lesson on vector arithmetic? The theme was that R
| performs many operations on an element-by-element basis. We called
| these 'vectorized' operations.

1: a vector of 4 logical values
2: a single logical value

Selection: 1

| Your dedication is inspiring!

  |===========                                                |  18%

| Print the contents of tf now.

> tf
[1]  TRUE FALSE  TRUE FALSE

| Nice work!

  |============                                               |  21%

| The statement num_vect < 1 is a condition and tf tells us whether
| each corresponding element of our numeric vector num_vect
| satisfies this condition.

...

  |==============                                             |  24%

| The first element of num_vect is 0.5, which is less than 1 and
| therefore the statement 0.5 < 1 is TRUE. The second element of
| num_vect is 55, which is greater than 1, so the statement 55 < 1
| is FALSE. The same logic applies for the third and fourth
| elements.

...

  |================                                           |  26%

| Let's try another. Type num_vect >= 6 without assigning the result
| to a new variable.

> num_vect >= 6
[1] FALSE  TRUE FALSE  TRUE

| All that practice is paying off!

  |=================                                          |  29%

| This time, we are asking whether each individual element of
| num_vect is greater than OR equal to 6. Since only 55 and 6 are
| greater than or equal to 6, the second and fourth elements of the
| result are TRUE and the first and third elements are FALSE.

...

  |===================                                        |  32%

| The `<` and `>=` symbols in these examples are called 'logical
| operators'. Other logical operators include `>`, `<=`, `==` for
| exact equality, and `!=` for inequality.

...

  |====================                                       |  34%

| If we have two logical expressions, A and B, we can ask whether at
| least one is TRUE with A | B (logical 'or' a.k.a. 'union') or
| whether they are both TRUE with A & B (logical 'and' a.k.a.
| 'intersection'). Lastly, !A is the negation of A and is TRUE when
| A is FALSE and vice versa.

...

  |======================                                     |  37%

| It's a good idea to spend some time playing around with various
| combinations of these logical operators until you get comfortable
| with their use. We'll do a few examples here to get you started.

...

  |=======================                                    |  39%

| Try your best to predict the result of each of the following
| statements. You can use pencil and paper to work them out if it's
| helpful. If you get stuck, just guess and you've got a 50% chance
| of getting the right answer!

...

  |=========================                                  |  42%

| (3 > 5) & (4 == 4)

1: FALSE
2: TRUE

Selection: 1

| You got it right!

  |==========================                                 |  45%

| (TRUE == TRUE) | (TRUE == FALSE)

1: TRUE
2: FALSE

Selection: 1

| That's correct!

  |============================                               |  47%

| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: FALSE
2: TRUE

Selection: 1

| Keep trying!

| This is a tricky one. Remember that the `!` symbol negates
| whatever comes after it. There's also an 'order of operations'
| going on here. Conditions that are enclosed within parentheses
| should be evaluated first. Then, work your way outwards.

1: TRUE
2: FALSE

Selection: 2

| Not quite right, but keep trying.

| This is a tricky one. Remember that the `!` symbol negates
| whatever comes after it. There's also an 'order of operations'
| going on here. Conditions that are enclosed within parentheses
| should be evaluated first. Then, work your way outwards.

1: TRUE
2: FALSE

Selection: 1

| You got it!

  |==============================                             |  50%

| Don't worry if you found these to be tricky. They're supposed to
| be. Working with logical statements in R takes practice, but your
| efforts will be rewarded in future lessons (e.g. subsetting and
| control structures).

...

  |===============================                            |  53%

| Character vectors are also very common in R. Double quotes are
| used to distinguish character objects, as in the following
| example.

...

  |=================================                          |  55%

| Create a character vector that contains the following words: "My",
| "name", "is". Remember to enclose each word in its own set of
| double quotes, so that R knows they are character strings. Store
| the vector in a variable called my_char.

> my_char <- ("My", "name", "is")
Error: unexpected ',' in "my_char <- ("My","
> my_char <- c("My", "name", "is")

| Keep up the great work!

  |==================================                         |  58%

| Print the contents of my_char to see what it looks like.

> my_char
[1] "My"   "name" "is"  

| Perseverance, that's the answer.

  |====================================                       |  61%

| Right now, my_char is a character vector of length 3. Let's say we
| want to join the elements of my_char together into one continuous
| character string (i.e. a character vector of length 1). We can do
| this using the paste() function.

...

  |=====================================                      |  63%

| Type paste(my_char, collapse = " ") now. Make sure there's a space
| between the double quotes in the `collapse` argument. You'll see
| why in a second.

> paste(my_char, collapse = " ")
[1] "My name is"

| Your dedication is inspiring!

  |=======================================                    |  66%

| The `collapse` argument to the paste() function tells R that when
| we join together the elements of the my_char character vector,
| we'd like to separate them with single spaces.

...

  |========================================                   |  68%

| It seems that we're missing something.... Ah, yes! Your name!

...

  |==========================================                 |  71%

| To add (or 'concatenate') your name to the end of my_char, use the
| c() function like this: c(my_char, "your_name_here"). Place your
| name in double quotes where I've put "your_name_here". Try it now,
| storing the result in a new variable called my_name.

> c(my_char, "Nelson")
[1] "My"     "name"   "is"     "Nelson"

| Keep trying! Or, type info() for more options.

| Tack your name on to the end of the my_char vector using the c()
| function.  Be sure to assign the result to a new variable called
| my_name. If your name was "Swirl", you would type my_name <-
| c(my_char, "Swirl").

> my_name <- c(my_char, "Nelson")

| Excellent work!

  |===========================================                |  74%

| Take a look at the contents of my_name.

> my_name
[1] "My"     "name"   "is"     "Nelson"

| Keep up the great work!

  |=============================================              |  76%

| Now, use the paste() function once more to join the words in
| my_name together into a single character string. Don't forget to
| say collapse = " "!

> paste(my_char, "Nelson")
[1] "My Nelson"   "name Nelson" "is Nelson"  

| Almost! Try again. Or, type info() for more options.

| Use paste(my_name, collapse = " ") to join all four words
| together, separated by single spaces.

> paste(my_name, collapse = " ")
[1] "My name is Nelson"

| You got it right!

  |===============================================            |  79%

| In this example, we used the paste() function to collapse the
| elements of a single character vector. paste() can also be used to
| join the elements of multiple character vectors.

...

  |================================================           |  82%

| In the simplest case, we can join two character vectors that are
| each of length 1 (i.e. join two words). Try paste("Hello",
| "world!", sep = " "), where the `sep` argument tells R that we
| want to separate the joined elements with a single space.

> paste("Hello", "world!", sep = " ")
[1] "Hello world!"

| That's correct!

  |==================================================         |  84%

| For a slightly more complicated example, we can join two vectors,
| each of length 3. Use paste() to join the integer vector 1:3 with
| the character vector c("X", "Y", "Z"). This time, use sep = "" to
| leave no space between the joined elements.

> paste("X", "Y", "Z", sep = "")
[1] "XYZ"

| You almost had it, but not quite. Try again. Or, type info() for
| more options.

| Use paste(1:3, c("X", "Y", "Z"), sep = "") to see what happens
| when we join two vectors of equal length using paste().

> paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"

| Nice work!

  |===================================================        |  87%

| What do you think will happen if our vectors are of different
| length? (Hint: we talked about this in a previous lesson.)

...

  |=====================================================      |  89%

| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where
| LETTERS is a predefined variable in R containing a character
| vector of all 26 letters in the English alphabet.

> 
> paste(LETTERS, 1:4, seq = "-")
 [1] "A 1 -" "B 2 -" "C 3 -" "D 4 -" "E 1 -" "F 2 -" "G 3 -" "H 4 -"
 [9] "I 1 -" "J 2 -" "K 3 -" "L 4 -" "M 1 -" "N 2 -" "O 3 -" "P 4 -"
[17] "Q 1 -" "R 2 -" "S 3 -" "T 4 -" "U 1 -" "V 2 -" "W 3 -" "X 4 -"
[25] "Y 1 -" "Z 2 -"

| You almost had it, but not quite. Try again. Or, type info() for
| more options.

| Type paste(LETTERS, 1:4, sep = "-") to see how R recycles the
| vector 1:4 to match the length of LETTERS. Notice we are using `-`
| as our separator this time instead of a single space.

> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2"
[11] "K-3" "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4"
[21] "U-1" "V-2" "W-3" "X-4" "Y-1" "Z-2"

| Perseverance, that's the answer.

  |======================================================     |  92%

| Since the character vector LETTERS is longer than the numeric
| vector 1:4, R simply recycles, or repeats, 1:4 until it matches
| the length of LETTERS.

...

  |========================================================   |  95%

| Also worth noting is that the numeric vector 1:4 gets 'coerced'
| into a character vector by the paste() function.

...

  |=========================================================  |  97%

| We'll discuss coercion in another lesson, but all it really means
| is that the numbers 1, 2, 3, and 4 in the output above are no
| longer numbers to R, but rather characters "1", "2", "3", and "4".

...

  |===========================================================| 100%

| Would you like to receive credit for completing this course on
| Coursera.org?

1: Yes
2: No
